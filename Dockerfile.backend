# Multi-stage build para o backend Node.js/Express

# Stage 1: Build
FROM node:20-alpine AS builder

WORKDIR /app

# Copia package files
COPY package*.json ./

# Instala todas as dependências (incluindo devDependencies para build)
RUN npm ci

# Copia arquivos TypeScript
COPY tsconfig*.json ./
COPY backend ./backend
COPY server.ts ./

# Compila TypeScript
RUN npm run build:backend

# Stage 2: Production
FROM node:20-alpine

# Cria usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copia package files
COPY package*.json ./

# Instala apenas dependências de produção
RUN npm ci --only=production && \
    npm cache clean --force

# Copia arquivos compilados do stage anterior
COPY --from=builder /app/dist ./dist

# Cria diretório para uploads
RUN mkdir -p /app/uploads && \
    chown -R nodejs:nodejs /app

# Muda para usuário não-root
USER nodejs

# Expõe a porta do backend
EXPOSE 3001

# Variáveis de ambiente (podem ser sobrescritas no docker-compose)
ENV NODE_ENV=production
ENV PORT=3001
ENV MONGODB_URI=mongodb://mongodb:27017/bento-box

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Comando para iniciar o servidor
CMD ["node", "dist/server.js"]
